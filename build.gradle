plugins {
    id 'java-library'
    id 'signing'
    // plugin to publish to maven central: https://vanniktech.github.io/gradle-maven-publish-plugin/central/ :
    id "com.vanniktech.maven.publish" version "0.28.0"
}

group 'org.aisbreaker'
version '0.1.2'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.16.1'
    //implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

//jar {
//    manifest {
//        attributes 'Main-Class': 'org.aisbreaker.example.AIsBreakerSimpleChat'
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

javadoc {
    options {
        author true
        version true
    }
}
/*
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}
*/

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, /*javadocJar,*/ sourcesJar
}

mavenPublishing {
    signAllPublications()

    // publishing to https://central.sonatype.com/
    // automatic release could be buggy: https://vanniktech.github.io/gradle-maven-publish-plugin/central/#automatic-release
    publishToMavenCentral("CENTRAL_PORTAL", true)

    // meta data for the library
    def githubRepo = "github.com/aisbreaker/aisbreaker-api-java"
    pom {
        name = 'AIsBreaker.org API Library'
        description = 'JVM client to use the AIsBreaker in your Java, Kotlin or any other JVM application.'
        url = 'https://aisbreaker.org/'
        inceptionYear = "2023"
        //properties = [
        //    myProp: "value",
        //    "prop.with.dots": "anotherValue"
        //]
        licenses {
            license {
                name = 'MIT License'
                url = "https://${githubRepo}/blob/main/LICENSE"
            }
        }
        developers {
            developer {
                id = 'chris'
                name = 'Chris Hapke'
                email = 'chris.public@aisbreaker.org'
            }
        }
        scm {
            url = 'http://aisbreaker.org/'
            connection = "scm:git:git://github.com/${githubRepo}.git"
            developerConnection = "scm:git:git://github.com/${githubRepo}.git"
        }
        issueManagement {
            url.set("https://github.com/${githubRepo}/issues")
        }
    }
    // the coordinates (group:artifactId:version) used to consume the library:
    coordinates("${group}", "${name}", "${version}")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    
    repositories {
        maven {
          name = "OSSRH"
          url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
          credentials {
            username = System.getenv("mavenCentralUsername")
            password = System.getenv("mavenCentralPassword")
          }
        }
    }
}

signing {
    def signingKey = findProperty("signingInMemoryKey")
    def signingPassword = findProperty("signingInMemoryKeyPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

tasks.named("signMavenJavaPublication").configure {
    dependsOn(javadoc)
}
