plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'org.aisbreaker'
version '0.1.0'

java {
    //sourceCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_11
    //targetCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.16.1'
    //implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

//jar {
//    manifest {
//        attributes 'Main-Class': 'org.aisbreaker.example.AIsBreakerSimpleChat'
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign publishing.publications
}

def githubRepo = "github.com/aisbreaker/aisbreaker-api-java"
def releaseUrl = "https://s01.oss.sonatype.org/service/local/"
def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'AIsBreaker.org API Library'
                description = 'JVM client to use the AIsBreaker in your Java, Kotlin or any other JVM application.'
                url = 'https://aisbreaker.org/'
                properties = [
                    myProp: "value",
                    "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'MIT License'
                        url = "https://${githubRepo}/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = 'hapkecom'
                        name = 'Christian Hapke'
                        email = '1193103+hapkecom@users.noreply.github.com'
                    }
                }
                scm {
                    url = 'http://aisbreaker.org/'
                    connection = "scm:git:git://github.com/${githubRepo}.git"
                    developerConnection = "scm:git:git://github.com/${githubRepo}.git"
                }
                issueManagement {
                    url.set("https://github.com/${githubRepo}/issues")
                }
            }
        }
    }
    
    repositories {
        maven {
          name = "OSSRH"
          url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
          credentials {
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
          }
        }

        /*
        sonatype {
          nexusUrl.set(uri(Meta.release))
          snapshotRepositoryUrl.set(uri(Meta.snapshot))
          val ossrhUsername = providers
            .environmentVariable("MAVEN_USERNAME")
            .forUseAtConfigurationTime()
          val ossrhPassword = providers
            .environmentVariable("MAVEN_PASSWORD")
            .forUseAtConfigurationTime()
          if (ossrhUsername.isPresent && ossrhPassword.isPresent) {
            username.set(ossrhUsername.get())
            password.set(ossrhPassword.get())
          }
        }
        */

    }
}

